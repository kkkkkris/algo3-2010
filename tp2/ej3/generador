#!/usr/bin/env python
import random, sys, getopt

def generar_puertas(cant, vacias):
    puertas = []
    for x in range(cant):
        puerta = random.sample(vacias,1)[0]
        vacias.remove(puerta)
        llave = random.sample(vacias,1)[0]
        vacias.remove(llave)
        puertas.append((puerta,llave))
    return puertas
#!/usr/bin/python

def conectar_nodos(size, conexo, luck, trivial):
    nodos = {}
    for x in range(size):
        actual = x+1
        nodos[actual] = []
        if conexo and actual < size:
            nodos[x+1].append((actual)%size + 1)
        if not trivial and actual == 1:
            tope = size - 1
        else:
            tope = size
        for y in range(actual,tope):
            r = random.randint(0,99)
            if not y+1 in nodos[actual] and r < luck:
                nodos[actual]+=[y+1]
    return nodos

def main(size, amount = 1, luck = 50, conexo = False, dungeon = False,\
         escalera = False, trivial = False):
    if escalera:
        primero = 20
    else:
        primero = size
    for n in range(primero, size+1):
        for veces in range(amount):
            res = []
            m = 0
            p = 0
            #en cada cuarto solo hay o una puerta o una llave
            #la puerta y la salida no tienen puertas
            #cantidad de puertas maximas: (n - 2)/2
            if dungeon:
                total_puertas = n/2 - 1
            else:
                total_puertas = random.randint(0,n/2 - 1)    
            vacias  = set(range(2,n)) #no incluyo entrada y salida
            puertas = generar_puertas(total_puertas, vacias)
            nodos   = conectar_nodos(n, conexo, luck, trivial)
            
            for x in puertas:
                res.append(" "*2 + str(x[0]) + " " + str(x[1]))
            for x in nodos:
                for y in nodos[x]:
                    #pongo un poco de ruido
                    if y%2 == 0:
                        res.append(" "*4 + str(y) + " " + str(x))
                    else :
                        res.append(" "*4 + str(x) + " " + str(y))
                    m += 1
            p = len(puertas)
            res.insert(0, str(n) + " " + str(p) + " " + str(m))
            print '\n'.join(res)
        
    print "-1 -1 -1"   
    return 0


def usage():
    print ' '.join(sys.argv)
    print "esta mal, se espera:"
    print "./generador [parametros]"
    print "-n --nodos   : numero > 3 (cantidad maxima de nodos)"
    print "-v --veces   : cantidad de grafos con n nodos"
    print "-s --suerte  : densidad del grafo. numero entre 1 y 100"
    print "-c --conexo  : conexo, por default no es conexo"
    print "-d --dungeon : LLENAR DE PUERTAS"
    print "-e --escalera: generar de 4 a n"
    print "-t --trivial : si el primero puede estar conectado con el ultimo"
    print "example: ./generador -n 20 -de -s 25"
    sys.exit(1)

if __name__ == "__main__":

    try:
        opts, args = getopt.getopt(sys.argv[1:], "n:v:s:h:cdet", ["nodos=", \
            "veces=", "suerte=", "conexo", "dungeon", "escalera", "trivial",\
                                                                  "help"])
    except getopt.GetoptError:
        # print help information and exit:
        print "Error parseando"
        usage()
        sys.exit(2)
    verbose = False
    n = 6
    amount = 1
    luck = 50
    conexo = False
    dungeon = True
    escalera = False
    trivial = False
    for o, a in opts:
        if o == "-v":
            verbose = True
        if o in ("-h", "--help"):
            usage()
        if o in ("-n", "--nodos"):
            try:
                n = int(a)
            except:
                print "se espera numero"
                usage()
        if o in ("-v", "--veces"):
            try:
                amount = int(a)
            except:
                print "se espera numero"
                usage()
        if o in ("-s", "--suerte"):
            try:
                luck = int(a)
            except:
                print "se espera numero"
                usage()
        if o in ("-c", "--conexo"):
            conexo = True
        if o in ("-d", "--dungeon"):
            dungeon = True
        if o in ("-e", "--escalera"):
            escalera = True
        if o in ("-t", "--trivial"):
            trivial = True
    sys.exit(main(n, amount, luck, conexo, dungeon, escalera, trivial))
